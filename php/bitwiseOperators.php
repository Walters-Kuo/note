<?
交集(And)：
echo 11&13; //output:9
/*
and運算就是雙方位元都是1的位元才輸出1，其他都輸出0
    11(1011)
&   13(1101)
------------
     9(1001)    
*/

聯集(Or)：
echo 11|13; //output:15
/*
or運算就是雙方中一方位元是1就輸出1，雙方都是0才輸出0
    11(1011)
|   13(1101)
------------
    15(1111)    
*/echo 11|13; //output:15
/*
or運算就是雙方中一方位元是1就輸出1，雙方都是0才輸出0
    11(1011)
|   13(1101)
------------
    15(1111)    
*/

互斥(Xor)：
echo 11^13; //output:6
/*
xor運算就是雙方中一方位元是1，另一方位元是0就輸出1，其他都輸出0
    11(1011)
^   13(1101)
------------
     6(0110)    
*/

左移(Shift Left)：
11 << 2 //11往左邊移動2個位元
/*
左移運算就是將全部位元往左移兩格，然後右邊補上0
11(1011) ->左移一次，右邊補0-> 22(10110) ->左移一次，右邊補0-> 44(101100)
*/
11 * (2 * 2) = 44

11 << 3
11 * (2 * 2 * 2) = 88

右移(Shift Right)：
11 >> 2 //11往右邊邊移動2個位元
/*
右移運算就是將全部位元往右移兩格，超出右邊個位數的位元就直接不要了，然後左邊邊補上0
11(1011) ->右移一次，左邊補0-> 5(0101) ->右移一次，左邊補0-> 2(0010)
*/

11 / (2 * 2) = 2

11 >> 3
11 / (2 * 2 * 2) = 1

補數(Not)：//is a binary negation operator
echo ~11; //output:-12
/*
not運算就是將全部位元0換成1，1換成0
 ~  11(1011)
------------
   -12(0100)    
*/