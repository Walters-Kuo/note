要撰寫 functional programming，這些觀念非常重要：

    撰寫 pure function，盡量避免 side effect，讓除錯更加容易
    善用 higher order function，將部份實作委外，讓程式更有彈性
    使用 lamda 寫出更簡短的 function
    宣告式 (declarative) 思考，將程式步驟拆成更小、更明確運算單元，讓程式更好閱讀

side effect
副作用指的是函數在運行過程中，除了返回結果之外，還對系統的其他部分產生的影響。
例如：
修改全域變數
改變物件的屬性
執行輸入/輸出操作（如寫入文件、打印到控制台等）
改變資料庫中的數據

副作用會使得程式變得難以預測和除錯。函數式編程強調純函數，這些函數僅依賴其輸入參數並返回結果，
而不改變任何外部狀態。這種設計方式使得函數更具可預測性、可重用性、易於測試和除錯
