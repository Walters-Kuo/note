php
->all()
->get()->toArray()
->toSql() will return the SQL query as a string, but it will not include the actual values

rs.status() //選哪一台可以寫入
db.getCollection('auth_period')

.find({})
.count({ field1: 0 }) //欄位 field1 = 0
.sort({project_id:1})//Ascending
.sort({_id:-1})//Descending
.limit(1)
.distinct("status")

like
find({custom_name:/人壽/})
find({custom_name:{ $regex: /人壽/, $options: 'i' }})

aggregate
gt bigger than
lt lower than
gte

$divide: ["$online_time", 1000]
//除以 1000 轉成 date
.aggregate([
  {
    $project: {
      online_time: 1,
      human_readable_time: {
        $toDate: { $divide: ["$online_time", 1000] }
      }
    }
  }
])

{ offline_time: { $gt: '2024-03-25' } }
db.getCollection('sales_project').find({
    db.yourCollection.find({ product_id: { $ne: 4 } });
    }).sort({project_id:1})

//find product_id not equal to 2 and 4
.find({$and:[
      {product_id:{$ne:2}},
      {product_id:{$ne:4}},
  ]
  }).sort({_id:-1})

//and
.find({$and: [
      { product_id: 2 },
      { expire_time: { $gt: '2025-04-01' } }
    ]}).sort({expire_time:-1})

.find({$and: [
      { provider_id: 2 },
      { product_id:{ $ne: 4 }}
      { offline_time: { $gt: new Date() } }
    ]
  })

.find({
  $and: [{ field1: value1 },
    {$or: [
        { field2: value2 },
        { field3: value3 }
      ]}
  ]
})

.find({$or : [
  {'auth_type':"GooglePlay"},
  {'auth_type':"AppleStore"}
  ]})

.find({
    status:{
      $in : ['GooglePlay', 'AppleStore']
    }
  })



//同一個 account 的數量
.aggregate([
  {
    $group: {
      _id: "$account",  // group by "account" field
      count: { $sum: 1 }  // increment the count for each document
    }
  }
])

//同一個 account 的數量大於 1

.aggregate([
  {
    $group: {
      _id: "$account",  // group by "account" field
      count: { $sum: 1 }  // increment the count for each document
    }
  },
  {
    $match: {
      count: { $gt: 1 }  // filter groups where count is greater than 1
    }
  }
])

//同一個 account 的數量大於 1的總數
.aggregate([
  {
    $group: {
      _id: "$account",  // group by "account" field
      count: { $sum: 1 }  // increment the count for each document
    }
  },
  {
    $match: {
      count: { $gt: 1 }  // filter groups where count is greater than 1
    }
  },
  {
    $group: {
      _id: null,  // group all documents together
      total: { $sum: 1 }  // increment the total for each document
    }
  }
])
docker run --name mongo4 -v ~/Desktop/udn/nginx-php7.4/mongo:/data/db -d -p 27017:27017 --rm mongo
docker run --name mongo4 -p 27017:27017 --rm mongo mongod --auth
docker stop mongo4
docker exec -it mongo4 bash
mongo
show dbs # 顯示DB
use dbname # 切換dbname
show collections # 顯示集合
db.getCollection('test').find({})
db.system.version.find() # 資料查詢
exit # 指令，離開資料庫或容器
docker exec mongo4 mongo --eval "print(version())" #確認資料庫狀況

"tree_id" : 0.0,
    "name" : "John Doe",
    "birthday" : "19760606",
    "address" : {
        "street" : "123 partk street",
        "city" : "anytown",
        "state" : "NY"
    }

gt greater than { field: { $gt: value } }
lt

use test
db.createUser(
  {
    user: "myTester",
    pwd:  passwordPrompt(),   // or cleartext password
    roles: [ { role: "readWrite", db: "test" },
             { role: "readWrite", db: "accounts" },
             { role: "read", db: "reporting" }
    ]
  }
)

//get product_id = 2 and group by account having count > 0
db.getCollection('auth_period').aggregate([
  { $match: { product_id: 2 } },
  { $group: { _id: "$account", count: { $sum: 1 } } },
  { $match: { count: { $gt: 0 } } }
])


db.yourCollection.find({
  $expr: {
    $gt: [
      { $subtract: [ { $dateFromString: { dateString: "$expire_time" } }, new Date() ] },
      365 * 24 * 60 * 60 * 1000
    ]
  }
})


.find({
    product_id: 2,
    $expr: {$gt: [{ $subtract: [ { $dateFromString: { dateString: "$expire_time" } }, new Date() ] },365]}
    }).sort({expire_time:-1})

//show current date
db.runCommand({ eval: "new Date()" });
